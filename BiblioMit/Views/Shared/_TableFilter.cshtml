@model TableFilterVM
@using BiblioMit.Models.ViewModels

@{
    Model.Srt = (string)ViewData["srt"];
    //Model.Asc = (bool)ViewData["asc"];
    Model.Val = ((IDictionary<string, List<string>>)ViewData["Filters"]).ContainsKey("FechaIngreso") ?
        ((IDictionary<string, List<string>>)ViewData["Filters"])["FechaIngreso"].First() :
        "Fecha";
}

<partial name="_Libs" model='new List<string> { "bootstrap-select", "bootstrap-datepicker", "tableFilter" }' />

@switch (Model.Type)
{
    case FilterType.date:
    case FilterType.select:
        <div class="row">
            <div class="col-10">
                @if (Model.Type == FilterType.date)
                {
                    <div class="input-group date">
                        <div class="input-group-prepend">
                            <span id="btn@(Model.Id)" class="input-group-text calendarShow"><i class="far fa-calendar-alt"></i></span>
                        </div>
                        <input type="text"
                               id="@Model.Id"
                               name="@Model.Name"
                               value="@Model.Val"
                               class="form-control tableFilter calendarFilter"
                               aria-describedby="btn@(Model.Id)" />
                    </div>
                }
                else
                {
                    Model.List = ViewData[Model.Id] as MultiSelectList;
                    <select id="@Model.Id"
                            title="@Model.Name"
                            class="selectpicker form-control show-tick tableFilter dropdownFilter"
                            data-width="150px"
                            data-size="4"
                            multiple
                            data-max-options="@Model.MaxOptions"
                            data-live-search="@Model.LiveSearch"
                            asp-items="Model.List"></select>
                }
            </div>
            <div id="@Model.Id"
                 class="col-1 sorting@(Model.Srt == Model.Id ? Model.Asc ? "_asc" : "_desc" : "") tableFilter sortingFilter">
                &emsp;
            </div>
        </div>
        break;
    case FilterType.checkbox:
        <label class="checkbox-inline">
            <input class="tableFilter checkboxFilter"
                   id="@Model.Name"
                   type="checkbox"
                   data-toggle="toggle"
                   data-on="@Model.Name - On"
                   data-off="@Model.Name - Off"
                   @(true ? "checked" : "")>
        </label>
        break;
    case FilterType.sort:
    default:
        <div class="filter-sort sorting@(Model.Srt == Model.Id ? Model.Asc ? "_asc" : "_desc" : "") tableFilter sortingFilter"
             id="@Model.Id">
            @Model.Name
        </div>
        break;
}